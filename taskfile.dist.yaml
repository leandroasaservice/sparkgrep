# https://taskfile.dev

version: '3'

vars:
  PYTHON: python3
  VENV_DIR: .venv
  SRC_DIR: src
  TESTS_DIR: tests

tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list
    # Release helpers
  release:check:
    desc: "Check if project is ready for release"
    cmds:
      - echo "=== Release Readiness Check ==="
      - task: clean:all
      - task: venv
      - task: build:install
      - task: quality
      - echo "=== Release checks passed ==="

  quality:
    desc: "Run all code quality checks"
    deps:
      - security
      - lint
      - format:check
      - test

  venv:
    desc: "Creates Python Virtual Environment."
    cmds:
      - "{{.PYTHON}} -m venv {{.VENV_DIR}}"
      - "{{.VENV_DIR}}/bin/python -m pip install --upgrade pip"
      - "{{.VENV_DIR}}/bin/python -m pip install -r requirements.txt"

  venv:recreate:
    desc: "Recreates Python virtual environment."
    cmds:
      - "rm -rf {{.VENV_DIR}}"
      - task: venv

  # Build
  build:
    desc: "Build package distribution"
    cmds:
      - "{{.VENV_DIR}}/bin/python -m build"

  build:clean:
    desc: "Clean build artifacts and rebuild"
    cmds:
      - task: clean
      - task: build

  build:install:
    desc: "Clean build artifacts, rebuild it and install in virtual environment."
    cmds:
      - task: build:clean
      - "{{.VENV_DIR}}/bin/python -m pip install dist/*.whl"

  build:recreate:
    desc: "Clean cache, recreate environment, and build."
    cmds:
      - task: clean
      - task: venv:recreate
      - task: build:install

  # Testing
  test:
    desc: "Run tests"
    cmds:
      - "{{.VENV_DIR}}/bin/python -m pytest"

  # Code Quality
  lint:
    desc: "Run ruff linting (check only)"
    cmds:
      - "{{.VENV_DIR}}/bin/ruff check {{.SRC_DIR}}/"

  lint:report:
    desc: "Run ruff linting and generate JSON report for SonarCloud"
    cmds:
      - "{{.VENV_DIR}}/bin/ruff check {{.SRC_DIR}}/ --output-format=json --output-file=ruff-report.json || true"

  lint:fix:
    desc: "Run ruff linting with auto-fix"
    cmds:
      - "{{.VENV_DIR}}/bin/ruff check {{.SRC_DIR}}/ --fix"

  format:
    desc: "Format code with ruff"
    cmds:
      - "{{.VENV_DIR}}/bin/ruff format {{.SRC_DIR}}/"

  format:check:
    desc: "Check code formatting without making changes"
    cmds:
      - "{{.VENV_DIR}}/bin/ruff format {{.SRC_DIR}}/ --check"


  security:
    desc: "Run security scan with Bandit"
    cmds:
      - "{{.VENV_DIR}}/bin/bandit -r {{.SRC_DIR}}/ -f json -o bandit-report.json || true"
      - "{{.VENV_DIR}}/bin/bandit -r {{.SRC_DIR}}/"

  fix:
    desc: "Auto-fix linting and formatting issues"
    cmds:
      - task: lint:fix
      - task: format

  # Utility Tasks
  clean:
    desc: "Clean up build artifacts, cache files, and temporary files"
    cmds:
      - rm -rf build/
      - rm -rf dist/
      - rm -rf *.egg-info/
      - rm -rf .pytest_cache/
      - rm -rf htmlcov/
      - rm -rf .coverage
      - rm -rf .ruff-report.json
      - rm -rf coverage.xml
      - rm -rf .ruff_cache/
      - rm -rf src/__pycache__/
      - rm -rf tests/__pycache__/

  clean:all:
    desc: "Clean everything including virtual environment"
    cmds:
      - task: clean
      - rm -rf {{.VENV_DIR}}

  # Development Helpers
  run:sample:
    desc: "Run sparkgrep on sample.py"
    cmds:
      - "{{.VENV_DIR}}/bin/sparkgrep sample.py"

  env:
    desc: "Show environment information"
    cmds:
      - echo "=== Environment Information ==="
      - task --version
      - pwd
      - which {{.PYTHON}}
      - ls -la {{.VENV_DIR}}/
